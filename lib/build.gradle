/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id "org.sonarqube" version "3.3"
    id 'jacoco'
}

archivesBaseName = 'OpeningHoursEvaluator'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}
test.finalizedBy jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectKey", "goodudetheboy_OpeningHoursEvaluator"
    property "sonar.organization", "goodudetheboy"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.coverage.exclusions", "src/main/java/openinghoursevaluator/*"
  }
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:29.0-jre'

    // OpeningHoursParser, used to parse opening hours
    implementation 'ch.poole:OpeningHoursParser:0.23.4'

    // This dependency is used to calculate sunrise/sunset time based on location
    implementation 'org.shredzone.commons:commons-suncalc:3.5'

    // Used to get timezone based on latitude and longitude
    implementation 'net.iakovlev:timeshape:2020d.11'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
    testImplementation 'org.slf4j:slf4j-simple:2.0.0-alpha2'
}

task testCI(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "openinghoursevaluator.Main"
}

task run(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "openinghoursevaluator.Main"
}

task individualTesting(type: JavaExec) {
    main = "openinghoursevaluator.IndividualTest"
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
    args('false')
}
individualTesting.group = 'verification'
individualTesting.description = "REPL instance to test the evaluator upon an input of an opening hours tag and a LocalDateTime string. Recommended running with '--console=plain'."


task individualTestingStrict(type: JavaExec) {
    main = "openinghoursevaluator.IndividualTest"
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
    args('true')
}
individualTestingStrict.group = 'verification'
individualTestingStrict.description = "REPL instance to test the evaluator upon an input of an opening hours tag and a LocalDateTime string, with parser running on strict mode. Recommended running with '--console=plain'."