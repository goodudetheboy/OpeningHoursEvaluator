/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package openinghoursevaluator;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.Console;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.time.DayOfWeek;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import ch.poole.openinghoursparser.OpeningHoursParser;
import ch.poole.openinghoursparser.ParseException;
import ch.poole.openinghoursparser.Rule;
import ch.poole.openinghoursparser.WeekDay;


public class Main {
    public static void main(String[] args) {
        // String test = "00:00-02:00,12:00-14:00,17:00-24:00 open, 18:00-22:00 off";     
        // OpeningHoursParser parser = new OpeningHoursParser(new ByteArrayInputStream(test.getBytes()));
        // try {
        //     List<Rule> rules = parser.rules(true);
        //     for(Rule rule : rules) {
        //         System.out.println(rule.isFallBack());
        //     }
        //     trace(rules.size());
        // } catch (ParseException e) {
        //     e.printStackTrace();
        //     return;
        // }

        // TimeRange time1 = new TimeRange(0, 7*60);
        // TimeRange time2 = new TimeRange(6*60, 14*60);
        // trace(time1.overlapWith(time2));

        LocalDateTime time = LocalDateTime.parse("2021-06-09T05:00");
        DayOfWeek javaWeekDay = time.getDayOfWeek();
        int test = javaWeekDay.ordinal();

        trace(test);
        // trace(weekdayInNum(WeekDay.TU));
    }


    public static int weekdayInNum(WeekDay weekday) {
        int result = 0;
        for(WeekDay weekdayEnum : WeekDay.values()) {
            if(weekday.equals(weekdayEnum))
                break;
            else
                result++;
        }
        return ++result;
    }

    public void randomTimeGenerator() {
        for(int i = 0; i <= 24; i++) {
            String iS = ((i < 10) ? "0" : "") + i;
            System.out.println(iS+ ":00");
            Random random = new Random();
            int randomMin = random.nextInt(60); 
            System.out.println(iS+ ((randomMin < 10) ? ":0" : ":") + randomMin);
        }
    }

    public void randomWeekdayGenerator() {
        try {
            BufferedReader timepointReader = new BufferedReader(new InputStreamReader(new FileInputStream("lib/test-data/input-time/timepoint.txt"), StandardCharsets.UTF_8));
            BufferedReader weekdayReader = new BufferedReader(new InputStreamReader(new FileInputStream("lib/test-data/input-time/weekday.txt"), StandardCharsets.UTF_8));
            ArrayList<String> timepoints = new ArrayList<String>();
            ArrayList<String> weekdays = new ArrayList<String>();
            String timepoint;
            String weekday;
            while((timepoint = timepointReader.readLine()) != null) {
                timepoints.add(timepoint);
            }
            while((weekday = weekdayReader.readLine()) != null) {
                weekdays.add(weekday);
            }
            for(int i = 0; i < weekdays.size(); i++) {
                trace(weekdays.get(i) + timepoints.get(startRange(0, timepoints.size())));
            }


        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
    public static void trace(Object something) {
        System.out.println(something);
    }

    public static int startRange(int x, int y) {
        Random rand = new Random();
        return rand.nextInt(Math.abs(x-y)) + Math.min(x, y);
    }
      
}

